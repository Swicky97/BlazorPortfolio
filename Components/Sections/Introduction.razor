@inject IJSRuntime JS

<div class="intro__container">
    <div class="left-column">
        <div class="intro__text">
            <h1>
                <span>@((MarkupString)DisplayedIntroWithBreaks)</span>
                <span style="color: var(--lightBlue);">@displayedHighlight</span>
                <span class="typing-cursor">|</span>
            </h1>
        </div>
    </div>

    <div class="right-column">
        <div class="image-border">
            <div class="dashed-rectangle frontend"></div>
            <div class="dashed-rectangle backend"></div>
            <div class="dashed-rectangle cloud"></div>

            <div class="track-wrapper track-cloud">
                <div class="orbit-icon" style="animation-delay: 0s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("Azure")'>
                        <img src="images/Icons/azure.png" alt="Azure" />
                    </div>
                </div>
            </div>

            <div class="track-wrapper track-backend">
                <div class="orbit-icon" style="animation-delay: 0s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("C#")'>
                        <img src="images/Icons/csharp.png" alt="C#" />
                    </div>
                </div>
                <div class="orbit-icon" style="animation-delay: -16s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("SQL")'>
                        <img src="images/Icons/sql.png" alt="SQL" />
                    </div>
                </div>
                <div class="orbit-icon" style="animation-delay: -32s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("Docker")'>
                        <img src="images/Icons/docker.png" alt="Docker" />
                    </div>
                </div>
                <div class="orbit-icon" style="animation-delay: -48s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("Rest API")'>
                        <img src="images/Icons/API.png" alt="API" />
                    </div>
                </div>
            </div>

            <div class="track-wrapper track-frontend">
                <div class="orbit-icon" style="animation-delay: 0s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("React")'>
                        <img src="images/Icons/react.png" alt="React" />
                    </div>
                </div>
                <div class="orbit-icon" style="animation-delay: -16s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("Blazor")'>
                        <img src="images/Icons/blazor.png" alt="Blazor" />
                    </div>
                </div>
                <div class="orbit-icon" style="animation-delay: -32s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("HTML 5")'>
                        <img src="images/Icons/HTML.png" alt="HTML" />
                    </div>
                </div>
                <div class="orbit-icon" style="animation-delay: -48s;">
                    <div class="orbit-circle" @onclick='() => SelectTech("Javascript")'>
                        <img src="images/Icons/javascript.png" alt="JS" />
                    </div>
                </div>
            </div>

            <div class="intro__header-image">
                <img src="images/Headshot2.png" alt="Me :)" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(selectedTech))
        {
            <div class="tech-label" @ref="techLabelRef" @key="selectedTech">
                @selectedTech
            </div>
        }
    </div>
</div>

@code {
    private string? selectedTech;
    private ElementReference techLabelRef;
    private string introText = "Hi, I'm Chase\nA Full Stack .NET Developer\n";
    private string highlightText = "Let's build something great together!";
    private string displayedIntro = "";
    private string displayedHighlight = "";
    private string DisplayedIntroWithBreaks => displayedIntro.Replace("\n", "<br />");
    private int charIndex = 0;
    private Timer? typingTimer;

    private async Task SelectTech(string tech)
    {
        selectedTech = tech;
        await Task.Delay(50);
        await JS.InvokeVoidAsync("restartFadeIn", techLabelRef);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StartTypingEffect();
        }
    }

    private void StartTypingEffect()
    {
        typingTimer = new Timer(TypingCallback, null, 100, 120);
    }

    private void TypingCallback(object? state)
    {
        if (charIndex < introText.Length)
        {
            displayedIntro = introText.Substring(0, charIndex + 1);
        }
        else if (charIndex < introText.Length + highlightText.Length)
        {
            int highlightIndex = charIndex - introText.Length;
            displayedHighlight = highlightText.Substring(0, highlightIndex + 1);
        }
        else
        {
            typingTimer?.Dispose();
            return;
        }

        charIndex++;
        InvokeAsync(StateHasChanged);
    }

}
